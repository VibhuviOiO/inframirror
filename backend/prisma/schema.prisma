generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  datacenters Datacenter[]
}

model Environment {
  id        Int                   @id @default(autoincrement())
  name      String                @unique
  clusters  Cluster[]
  instances IntegrationInstance[]
}

model Datacenter {
  id          Int                   @id @default(autoincrement())
  name        String
  shortName   String
  privateCIDR String?
  publicCIDR  String?
  regionId    Int
  clusters    Cluster[]
  region      Region                @relation(fields: [regionId], references: [id])
  hosts       Host[]
  instances   IntegrationInstance[]
}

model Host {
  id           Int                   @id @default(autoincrement())
  datacenterId Int
  hostname     String                @unique
  privateIP    String
  publicIP     String?
  kind         HostKind
  tags         Json?
  datacenter   Datacenter            @relation(fields: [datacenterId], references: [id])
  instances    IntegrationInstance[]
}

model Cluster {
  id            Int                   @id @default(autoincrement())
  name          String
  environmentId Int?
  datacenterId  Int?
  datacenter    Datacenter?           @relation(fields: [datacenterId], references: [id])
  environment   Environment?          @relation(fields: [environmentId], references: [id])
  instances     IntegrationInstance[]
}

model Integration {
  id              Int                   @id @default(autoincrement())
  name            String                @unique
  integrationType IntegrationType
  version         String
  description     String?
  updatedAt       DateTime              @updatedAt
  enabled         Boolean               @default(false)
  instances       IntegrationInstance[]
}

model IntegrationInstance {
  id            Int          @id @default(autoincrement())
  datacenterId  Int?
  hostId        Int
  clusterId     Int?
  environmentId Int?
  integrationId Int
  port          Int?
  config        Json?
  cluster       Cluster?     @relation(fields: [clusterId], references: [id])
  datacenter    Datacenter?  @relation(fields: [datacenterId], references: [id])
  environment   Environment? @relation(fields: [environmentId], references: [id])
  host          Host         @relation(fields: [hostId], references: [id])
  integration   Integration  @relation(fields: [integrationId], references: [id])
}

model Monitors {
  id                  Int         @id @default(autoincrement())
  monitorId           String
  monitorName         String?
  monitorType         MonitorType
  targetHost          String
  targetPort          Int?
  targetPath          String?
  httpMethod          String?
  expectedStatusCode  Int?
  dnsQueryType        String?
  dnsExpectedResponse String?
  executedAt          DateTime    @default(now())
  agentId             String?
  agentRegion         String?
  success             Boolean
  responseTime        Int?
  responseSizeBytes   Int?
  responseStatusCode  Int?
  responseContentType String?
  responseServer      String?
  responseCacheStatus String?
  dnsLookupMs         Int?
  tcpConnectMs        Int?
  tlsHandshakeMs      Int?
  timeToFirstByteMs   Int?
  packetLoss          Float?
  jitterMs            Int?
  dnsResponseValue    String?
  errorMessage        String?
  errorType           String?
  rawResponseHeaders  Json?
  rawResponseBody     String?
  rawRequestHeaders   Json?
  rawNetworkData      Json?
  criticalThresholdMs Int?
  warningThresholdMs  Int?

  @@index([monitorId])
  @@index([executedAt(sort: Desc)])
  @@index([success])
  @@index([monitorType])
  @@index([targetHost])
  @@index([responseTime(sort: Desc)])
  @@index([agentRegion])
  @@index([errorType])
  @@index([monitorId, agentRegion, executedAt(sort: Desc)])
  @@map("monitors")
}

enum IntegrationType {
  Database
  KeyValueStore
  SearchEngine
  Cache
  OrchestrationFramework
  Container
  Gateway
}

enum HostKind {
  VM
  Physical
  BareMetal
}

enum MonitorType {
  HTTP
  TCP
  UDP
  PING
  DNS
  HTTPS
}
